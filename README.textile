h2. Simple Http

This is a bare bones http client for scala which wraps HttpURLConnection

h2. Usage

h3. Simple Get

<pre><code>
  import scalaj.http.Http
  
  Http("http://foo.com/search").param("q","monkeys").asString
</code></pre>

h3. Simple Post

<code>
  Http.post("http://foo.com/add").params("name" -> "jon", "age" -> "29").asString
</code>

h3. OAuth Dance and Request

<pre><code>
  import scalaj.http.{Http, Token}
  
  val consumer = Token("key", "secret")
  val token = Http("http://foursquare.com/oauth/request_token").param("oauth_callback","oob").oauth(consumer).asToken
  
  println("Go to http://foursquare.com/oauth/authorize?oauth_token=" + token.key)
  
  val verifier = Console.readLine("Enter verifier: ").trim

  val accessToken = Http("http://foursquare.com/oauth/access_token").oauth(consumer, token, verifier).asToken
  
  println(Http("http://api.foursquare.com/v1/history.json").oauth(consumer, accessToken).asString)
</code></pre>

h3. Parsing the response

<code>
  Http("http://foo.com").{responseCode, asString, asXml, asBytes, asParams}
</code>


h2. Installation

h3. sbt

<code>
  val scalaj_http = "org.scalaj" %% "scalaj-http" % "0.3.7"
</code>

h3. maven

<pre><code>
  <dependency>
    <groupId>org.scalaj</groupId>
    <artifactId>scalaj-http_${scala.version}</artifactId>
    <version>0.3.7</version>
  </dependency>  
</code></pre>

h2. Advanced Usage Examples

h3. Parse the response InputStream using Lift Json

<pre><code>
  import java.io.InputStreamReader
  import net.liftweb.json.JsonParser
  
  Http("http://foo.com"){inputStream => 
    JsonParser.parse(new InputStreamReader(inputStream))
  }
</code></pre>

h3. Post raw Array[Byte] or String data and get response code

<code>
  Http.postData(url, data).header("content-type", "application/json").responseCode
</code>

h3. Post multipart/form-data

<code>
  Http.multipart(url, MultiPart("photo","headshot.png", "image/png", fileBytes)).responseCode
</code>

h3. Send https request to site with self-signed or otherwise shady certificate

<code>
  Http("https://localhost/").option(HttpOptions.allowUnsafeSSL).asString
</code>

h3. Do a HEAD request

<code>
  Http(url).option(HttpOptions.method("HEAD")).asString
</code>

h3. Custom connect and read timeouts

_These are set to 100 and 500 milliseconds respectively by default_

<code>
  Http(url).option(HttpOptions.connTimeout(1000)).option(HttpOptions.readTimeout(5000)).asString
</code>

h3. Get responseCode, responseHeaders and parsedResponse

<code>
  val (responseCode, headersMap, resultString) = Http(url).asHeadersAndParse(Http.readString)
</code>

h3. Get request via a proxy

<code>
  val response = Http(url).proxy(proxyHost, proxyPort).asString
</code>

h3. Other custom options

The @.option()@ method takes a function of type @HttpURLConnection => Unit@ so you can manipulate the connection in whatever way you want before the request executes.

h2. TODOS

* Handle other http methods better (PUT,HEAD,DELETE)
